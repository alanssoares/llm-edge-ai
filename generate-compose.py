#!/usr/bin/env python3
"""
Generate docker-compose.yml with configurable number of edge devices.

Usage:
    python3 generate-compose.py --devices 10
    python3 generate-compose.py --devices 1000
"""

import argparse
import yaml
from pathlib import Path


def generate_compose(num_devices: int, output_file: str = "docker-compose.yml"):
    """Generate docker-compose.yml with specified number of devices."""
    
    compose_config = {
        'services': {},
        'networks': {
            'edge-network': {
                'driver': 'bridge',
                'ipam': {
                    'config': [
                        {'subnet': '172.20.0.0/16'}
                    ]
                }
            }
        }
    }
    
    # Generate service for each device
    for i in range(1, num_devices + 1):
        device_id = f"{i:02d}" if num_devices < 100 else f"{i:03d}" if num_devices < 1000 else f"{i:04d}"
        device_name = f"edge-device-{device_id}"
        
        service_config = {
            'build': {
                'context': '.',
                'dockerfile': 'Dockerfile'
            },
            'container_name': device_name,
            'hostname': device_name,
            'environment': [
                f'DEVICE_NAME={device_name}',
                f'DEVICE_ID={device_id}'
            ],
            'volumes': [
                './config:/etc/edge-device:ro'
            ],
            'networks': ['edge-network'],
            'restart': 'unless-stopped'
        }
        
        compose_config['services'][device_name] = service_config
    
    # Write to file with header comment
    with open(output_file, 'w') as f:
        f.write(f"# This file is generated by generate-compose.py\n")
        f.write(f"# To regenerate: python3 generate-compose.py --devices {num_devices}\n")
        f.write(f"# Number of devices: {num_devices}\n\n")
        yaml.dump(compose_config, f, default_flow_style=False, sort_keys=False)
    
    print(f"‚úÖ Generated {output_file} with {num_devices} edge devices")
    return output_file


def main():
    parser = argparse.ArgumentParser(
        description="Generate docker-compose.yml for edge device simulation"
    )
    parser.add_argument(
        '--devices',
        type=int,
        default=10,
        help='Number of edge devices to create (default: 10)'
    )
    parser.add_argument(
        '--output',
        type=str,
        default='docker-compose.yml',
        help='Output file name (default: docker-compose.yml)'
    )
    
    args = parser.parse_args()
    
    if args.devices < 1:
        parser.error("Number of devices must be at least 1")
    
    if args.devices > 10000:
        print(f"‚ö†Ô∏è  Warning: Creating {args.devices} devices may consume significant resources")
        response = input("Continue? (yes/no): ")
        if response.lower() not in ['yes', 'y']:
            print("Cancelled")
            return
    
    generate_compose(args.devices, args.output)
    print(f"\nüìã Next steps:")
    print(f"   1. Review the generated {args.output}")
    print(f"   2. Customize config/config.json if needed")
    print(f"   3. Run: docker compose up -d")


if __name__ == '__main__':
    main()
